using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;
using System.IO;
using System.Xml.Serialization;
using System.Collections;
using System.Diagnostics;

namespace NCcode
{
    public partial class Form1 : Form
    {
        Data data;
        List<Op> oplist = new List<Op>();
        Panel addOp;
        CodePack cp = new CodePack();
        
        int serial = 0;
        bool ready = false;

        public Form1()
        {
            InitializeComponent();
            
            MainPanel.Controls.Add(detailZone, 1, 0);

            Op gen = new Op(detailZone, "General", "General");
            OpListBox.Items.Add("General");
            oplist.Add(gen);
            serial++;
            detailZone.Dock = DockStyle.Fill;
            addOp = panel_addOp;
            ready = true;

        }

        private void btn_add_Click(object sender, EventArgs e)
        {
            addOp.BringToFront();
        }

        private void btn_del_Click(object sender, EventArgs e)
        {
            ready = false;

            string selected = OpListBox.SelectedItem.ToString();

            if(selected!="General")
            {
                oplist.Remove(oplist.Find(p => p.Id == OpListBox.SelectedItem.ToString()));
                OpListBox.Items.Remove(selected);
            }

            ready = true;
            OpListBox.SelectedItem = OpListBox.Items[0];
        }

        private void btn_up_Click(object sender, EventArgs e)
        {
            moveOp(-1);
        }

        private void btn_down_Click(object sender, EventArgs e)
        {
            moveOp(1);
        }

        private void moveOp(int dir)
        {
            ready = false;
            int selected = OpListBox.SelectedIndex;

            if (selected <= 0)
                return; // No selected item - nothing to do

            // Calculate new index using move direction
            int newIndex = selected + dir;

            // Checking bounds of the range
            if (newIndex <= 0 || newIndex >= OpListBox.Items.Count)
                return; // Index out of range - nothing to do

            object temp=OpListBox.Items[selected];
            OpListBox.Items[selected] = OpListBox.Items[selected + dir];
            OpListBox.Items[selected + dir] = temp;
            //string temp = ((KeyValuePair<int, string>)OpListBox.SelectedItem).Value;
            ready = true;
            OpListBox.SelectedItem = OpListBox.Items[selected + dir];
            //oplist.Find(p => p.Id == OpListBox.SelectedItem.ToString()).panel.BringToFront();
        }

        private void OpListBox_SelectedIndexChanged(object sender, EventArgs e)
        {
            if (ready == true)
            {
                oplist.Find(p => p.Id == OpListBox.SelectedItem.ToString()).panel.BringToFront();
            }
                
        }

        private void btn_out_Click(object sender, EventArgs e)
        {
            
            string output = "";

            Op gen = oplist.Find(p => p.Id == "General");
            output += code_head(gen);

            for(int i=1;i<OpListBox.Items.Count;i++)
            {
                Op op = oplist.Find(p => p.Id == OpListBox.Items[i].ToString());

                if (op.Method == "Hole")
                {
                    output += code_hole(gen, op);
                }
                else if (op.Method == "Pocket")
                {
                    output += code_pocket(gen, op);
                }
            }
            output += code_foot(gen);

            using (StreamWriter sw = File.CreateText("./code.NC"))
            {
                sw.WriteLine(output);
            }

            try
            {
                Process code = new Process();
                code.StartInfo.FileName = "code.NC";
                code.Start();
            }
            catch { }
        }

        private string code_head(Op gen)
        {//O0001 filename
            string re = "O0001(" + gen.panel.Controls["project"].Text + ") \r\n";

            re += "(generated by LiaoNCgenerator) \r\n";

            re += " \r\n";

            return re;
        }

        private string code_hole(Op gen, Op op)
        {
            string re = "(*****" + op.Id + "*****) \r\n";
            string main_str = "";
            string feed = op.panel.Controls["feedRate"].Text;
            string saftyHeight = op.panel.Controls["safetyHeight"].Text;
            if(saftyHeight == "Default")
            {
                saftyHeight = gen.panel.Controls["safetyHeight"].Text;
            }

            ListBox lb = (ListBox)op.panel.Controls["points"];
            bool no_pnt = false;
            string[] pointsX;
            string[] pointsY;
            if (lb.Items.Count == 0)
            {
                pointsX = new string[1];
                pointsY = new string[1];
                pointsX[0] = "0";
                pointsY[0] = "0";
                no_pnt = true;
            }
            else
            {
                pointsX = new string[lb.Items.Count];
                pointsY = new string[lb.Items.Count];
                for (int i = 0; i < lb.Items.Count; i++)
                {
                    pointsX[i] = lb.Items[i].ToString().Split(',')[0];
                    pointsY[i] = lb.Items[i].ToString().Split(',')[1];
                }
            }
            
            re+="G40 G17 G49 G90 G80 G21 ";
            if (op.panel.Controls["workCoord"].Text == "Default")
                re += gen.panel.Controls["workCoord"].Text + " \r\n";//G54
            else
                re += op.panel.Controls["workCoord"].Text + " \r\n";

            re += "G91 G28 Z0 \r\n";

            if (op.panel.Controls["toolNum"].Text!="0")
                re += "T" + op.panel.Controls["toolNum"].Text + "M6 \r\n";

            re += "S" + op.panel.Controls["spindleSpeed"].Text + "M3 \r\n";

            re += "G54 G90 G00 X" + pointsX[0] + " Y" + pointsY[0] + " \r\n";

            if (op.panel.Controls["toolNum"].Text != "0")
                re += "G43 Z100 H" + op.panel.Controls["toolNum"].Text + " \r\n";

            re += "G00 Z" + saftyHeight + " \r\n";

            if (op.panel.Controls["coolant"].Text == "Yes")
                re += "M08 \r\n";

            if (op.panel.Controls["returnTo"].Text == "Safty height")
                main_str = "G99 G90 ";
            else
                main_str = "G98 G90 ";

            if (op.panel.Controls["holeType"].Text == "Drill")//main_str
            {
                if (op.panel.Controls["peckDepth"].Text == "0.000")
                {
                    if (op.panel.Controls["pauseTime"].Text == "0")
                    {
                        main_str += "G81 ";
                        main_str += "X" + pointsX[0] + " Y" + pointsY[0] + " ";
                        main_str += "Z" + op.panel.Controls["depth"].Text + " ";
                        main_str += "R" + saftyHeight + " ";
                        main_str += "F" + op.panel.Controls["feedRate"].Text + " ";
                        main_str += "K0 \r\n";
                    }
                    else
                    {
                        main_str += "G82 ";
                        main_str += "X" + pointsX[0] + " Y" + pointsY[0] + " ";
                        main_str += "Z" + op.panel.Controls["depth"].Text + " ";
                        main_str += "P" + op.panel.Controls["pauseTime"].Text + " ";
                        main_str += "R" + saftyHeight + " ";
                        main_str += "F" + op.panel.Controls["feedRate"].Text + " ";
                        main_str += "K0 \r\n";
                    }
                }
                else
                {
                    if (op.panel.Controls["deepHole"].Text == "Yes")
                    {
                        main_str += "G83 ";
                        main_str += "X" + pointsX[0] + " Y" + pointsY[0] + " ";
                        main_str += "Z" + op.panel.Controls["depth"].Text + " ";
                        main_str += "R" + saftyHeight + " ";
                        main_str += "Q" + op.panel.Controls["peckDepth"].Text + " ";
                        main_str += "F" + op.panel.Controls["feedRate"].Text + " ";
                        main_str += "K0 \r\n";
                    }
                    else
                    {
                        main_str += "G73 ";
                        main_str += "X" + pointsX[0] + " Y" + pointsY[0] + " ";
                        main_str += "Z" + op.panel.Controls["depth"].Text + " ";
                        main_str += "R" + saftyHeight + " ";
                        main_str += "Q" + op.panel.Controls["peckDepth"].Text + " ";
                        main_str += "F" + op.panel.Controls["feedRate"].Text + " ";
                        main_str += "K0 \r\n";
                    }
                }
            }
            else if (op.panel.Controls["type"].Text == "Reaming")
            {
                if (op.panel.Controls["pauseTime"].Text == "0")
                {
                    main_str += "G85 ";
                    main_str += "X" + pointsX[0] + " Y" + pointsY[0] + " ";
                    main_str += "Z" + op.panel.Controls["depth"].Text + " ";
                    main_str += "R" + saftyHeight + " ";
                    main_str += "F" + op.panel.Controls["feedRate"].Text + " ";
                    main_str += "K0 \r\n";
                }
                else
                {
                    main_str += "G89 ";
                    main_str += "X" + pointsX[0] + " Y" + pointsY[0] + " ";
                    main_str += "Z" + op.panel.Controls["depth"].Text + " ";
                    main_str += "P" + op.panel.Controls["pauseTime"].Text + " ";
                    main_str += "R" + saftyHeight + " ";
                    main_str += "F" + op.panel.Controls["feedRate"].Text + " ";
                    main_str += "K0 \r\n";
                }
            }
            else if (op.panel.Controls["type"].Text == "Boring")
            {
                if (op.panel.Controls["boringDeltaX"].Text == "0.000")
                {
                    main_str += "G86 ";
                    main_str += "X" + pointsX[0] + " Y" + pointsY[0] + " ";
                    main_str += "Z" + op.panel.Controls["depth"].Text + " ";
                    main_str += "R" + saftyHeight + " ";
                    main_str += "F" + op.panel.Controls["feedRate"].Text + " ";
                    main_str += "K0 \r\n";
                }
                else
                {
                    main_str += "G76 ";
                    main_str += "X" + pointsX[0] + " Y" + pointsY[0] + " ";
                    main_str += "Z" + op.panel.Controls["depth"].Text + " ";
                    main_str += "Q" + op.panel.Controls["boringDeltaX"].Text + " ";
                    main_str += "R" + saftyHeight + " ";
                    main_str += "F" + op.panel.Controls["feedRate"].Text + " ";
                    main_str += "K0 \r\n";
                }
            }
            else if (op.panel.Controls["type"].Text == "Tapping")
            {
                if (op.panel.Controls["peckDepth"].Text == "0.000")
                {
                    main_str += "G84 ";
                    main_str += "X" + pointsX[0] + " Y" + pointsY[0] + " ";
                    main_str += "Z" + op.panel.Controls["depth"].Text + " ";
                    main_str += "R" + saftyHeight + " ";
                    main_str += "F" + op.panel.Controls["feedRate"].Text + " ";
                    main_str += "K0 \r\n";
                }
                else
                {
                    main_str += "G84 ";
                    main_str += "X" + pointsX[0] + " Y" + pointsY[0] + " ";
                    main_str += "Z" + op.panel.Controls["depth"].Text + " ";
                    main_str += "Q" + op.panel.Controls["boringDeltaX"].Text + " ";
                    main_str += "R" + saftyHeight + " ";
                    main_str += "F" + op.panel.Controls["feedRate"].Text + " ";
                    main_str += "K0 \r\n";
                }
            }
            re += main_str;

            if(no_pnt==false)
            {
                for(int i=0;i<lb.Items.Count;i++)
                {
                    re += "X" + pointsX[i] + " Y" + pointsY[i] + " \r\n";
                }
            }
            re += "G80 \r\n";
            re += "M01 \r\n";
            return re;
        }

        private string code_pocket(Op gen, Op op)
        {
            string re = "(*****" + op.Id + "*****) \r\n";
            decimal feed = Convert.ToDecimal(op.panel.Controls["feedRate"].Text);
            string saftyHeight = op.panel.Controls["safetyHeight"].Text;
            if (saftyHeight == "Default")
            {
                saftyHeight = gen.panel.Controls["safetyHeight"].Text;
            }

            re += "G40 G17 G49 G90 G80 G21 ";
            if (op.panel.Controls["workCoord"].Text == "Default")
                re += gen.panel.Controls["workCoord"].Text + " \r\n";//G54
            else
                re += op.panel.Controls["workCoord"].Text + " \r\n";

            re += "G91 G28 Z0 \r\n";

            if (op.panel.Controls["toolNum"].Text != "0")
                re += "T" + op.panel.Controls["toolNum"].Text + "M6 \r\n";

            re += "S" + op.panel.Controls["spindleSpeed"].Text + "M3 \r\n";

            re += "G54 G90 G00 X0. Y0. \r\n";

            if (op.panel.Controls["toolNum"].Text != "0")
                re += "G43 Z100 H" + op.panel.Controls["toolNum"].Text + " \r\n";

            re += "G00 Z" + saftyHeight + " \r\n";//check R>Zs

            if (op.panel.Controls["coolant"].Text == "Yes")
                re += "M08 \r\n";

            if (op.panel.Controls["pocketType"].Text == "Rectangular")
            {
                decimal helix_r = 5;
                decimal z_c, x_n, y_n, z_n;
                decimal x_move, y_move;

                decimal pointsX = (Convert.ToDecimal(op.panel.Controls["pointsX1"].Text) + Convert.ToDecimal(op.panel.Controls["pointsX2"].Text)) / 2;
                decimal pointsY = (Convert.ToDecimal(op.panel.Controls["pointsY1"].Text) + Convert.ToDecimal(op.panel.Controls["pointsY2"].Text)) / 2;
                decimal startZ = Convert.ToDecimal(op.panel.Controls["startZ"].Text);
                decimal endZ = Convert.ToDecimal(op.panel.Controls["endZ"].Text);
                decimal z_step = Convert.ToDecimal(op.panel.Controls["stepDepth"].Text);
                decimal rST = Convert.ToDecimal(op.panel.Controls["roughSideThick"].Text);
                decimal fST = Convert.ToDecimal(op.panel.Controls["finishSideThick"].Text);

                decimal x_length = Convert.ToInt32(Convert.ToDecimal(op.panel.Controls["pointsX1"].Text) - Convert.ToDecimal(op.panel.Controls["pointsX2"].Text) - Convert.ToDecimal(op.panel.Controls["toolDia"].Text));
                decimal y_length = Convert.ToInt32(Convert.ToDecimal(op.panel.Controls["pointsY1"].Text) - Convert.ToDecimal(op.panel.Controls["pointsY2"].Text) - Convert.ToDecimal(op.panel.Controls["toolDia"].Text));

                int z_times = Convert.ToInt32(Math.Floor((startZ - endZ) / z_step));
                int xy_times;

                for (int i = 0; i < z_times; i++)
                {
                    if (x_length < y_length)
                    {
                        xy_times = Convert.ToInt32(Math.Abs(Math.Floor(x_length - 2 * fST) / (2 * rST)));
                        x_move = 0;
                        y_move = (y_length - x_length) / 2;
                    }
                    else
                    {
                        xy_times = Convert.ToInt32(Math.Abs(Math.Floor(y_length - 2 * fST) / (2 * rST)));
                        x_move = (x_length - y_length) / 2;
                        y_move = 0;
                    }

                    if (i == 0)
                    {
                        x_n = pointsX;
                        y_n = pointsY;
                        z_n = startZ;
                    }
                    else
                    {
                        x_n = pointsX;
                        y_n = pointsY;
                        z_n = endZ + z_step * (z_times - i + 1) + 2;
                    }

                    re += "G01 X" + x_n + " Y" + y_n + " F" + feed + " \r\n";
                    re += "Z" + z_n + " \r\n";

                    z_c = z_n;
                    z_n = endZ + z_step * (z_times - i);
                    re += cp.Entry_Helix(pointsX, pointsY, z_c, z_n, 1, helix_r);

                    x_n = pointsX + x_move;
                    y_n = pointsY + y_move;
                    re += "G01 X" + x_n + " Y" + y_n + " F" + feed + " \r\n";

                    for (int j = 0; j < xy_times; j++)
                    {
                        if (x_length < y_length)
                        {
                            x_n = pointsX - (x_move + rST * j);
                            re += "X" + x_n + " \r\n";
                            y_n = pointsY - (y_move + rST * j);
                            re += "Y" + y_n + " \r\n";
                            x_n = pointsX + (x_move + rST * j);
                            re += "X" + x_n + " \r\n";
                            y_n = pointsY + (y_move + rST * j);
                            re += "Y" + y_n + " \r\n";
                        }
                        else
                        {
                            y_n = pointsY - (y_move + rST * j);
                            re += "Y" + y_n + " \r\n";
                            x_n = pointsX - (x_move + rST * j);
                            re += "X" + x_n + " \r\n";
                            y_n = pointsY + (y_move + rST * j);
                            re += "Y" + y_n + " \r\n";
                            x_n = pointsX + (x_move + rST * j);
                            re += "X" + x_n + " \r\n";
                        }
                    }
                    if (x_length < y_length)
                    {
                        x_n = pointsX - x_length / 2;
                        re += "X" + x_n + " \r\n";
                        y_n = pointsY - y_length / 2;
                        re += "Y" + y_n + " \r\n";
                        x_n = pointsX + x_length / 2;
                        re += "X" + x_n + " \r\n";
                        y_n = pointsY + y_length / 2;
                        re += "Y" + y_n + " \r\n";
                        x_n = pointsX - x_length / 2;
                        re += "X" + x_n + " \r\n";
                    }
                    else
                    {
                        y_n = pointsY - y_length / 2;
                        re += "Y" + y_n + " \r\n";
                        x_n = pointsX - x_length / 2;
                        re += "X" + x_n + " \r\n";
                        y_n = pointsY + y_length / 2;
                        re += "Y" + y_n + " \r\n";
                        x_n = pointsX + x_length / 2;
                        re += "X" + x_n + " \r\n";
                        y_n = pointsY - y_length / 2;
                        re += "Y" + y_n + " \r\n";
                    }

                    re += "G00 Z" + saftyHeight + " \r\n";
                }
            }
            else if (op.panel.Controls["pocketType"].Text == "Circle")
            {
                decimal helix_r = 5;
                decimal z_c, x_n, y_n, z_n;

                decimal pointsX = Convert.ToDecimal(op.panel.Controls["centerX"].Text);
                decimal pointsY = Convert.ToDecimal(op.panel.Controls["centerY"].Text);
                decimal startZ = Convert.ToDecimal(op.panel.Controls["startZ"].Text);
                decimal endZ = Convert.ToDecimal(op.panel.Controls["endZ"].Text);
                decimal z_step = Convert.ToDecimal(op.panel.Controls["stepDepth"].Text);
                decimal rST = Convert.ToDecimal(op.panel.Controls["roughSideThick"].Text);
                decimal fST = Convert.ToDecimal(op.panel.Controls["finishSideThick"].Text);
                decimal radius = Convert.ToDecimal(op.panel.Controls["radius"].Text);

                int z_times = Convert.ToInt32(Math.Floor((startZ - endZ) / z_step));
                int r_times;

                for (int i = 0; i < z_times; i++)
                {

                    r_times = Convert.ToInt32(Math.Abs(Math.Floor(radius - fST) / rST));

                    if (i == 0)
                    {
                        x_n = pointsX;
                        y_n = pointsY;
                        z_n = startZ;
                    }
                    else
                    {
                        x_n = pointsX;
                        y_n = pointsY;
                        z_n = endZ + z_step * (z_times - i + 1) + 2;
                    }

                    re += "G01 X" + x_n + " Y" + y_n + " F" + feed + " \r\n";
                    re += "Z" + z_n + " \r\n";

                    z_c = z_n;
                    z_n = endZ + z_step * (z_times - i);
                    re += cp.Entry_Helix(pointsX, pointsY, z_c, z_n, 1, helix_r);

                    x_n = pointsX;
                    y_n = pointsY;

                    for (int j = 0; j < r_times; j++)
                    {
                        y_n = pointsY + (rST * j);
                        re += "G01 Y" + y_n + " F" + feed/2 + " \r\n";
                        y_n = pointsY;
                        re += "J" + (-y_n) + " F" + feed + " \r\n";

                    }
                    re += "G01 Y" + pointsY + " \r\n";
                    
                    re += "G02 Y" + Math.Round(pointsY + radius, 3) + " R" + radius + " \r\n";
                    re += "G02 J-" + radius + " \r\n";
                    re += "G02 Y" + Math.Round(pointsY) + " R" + radius + " \r\n";

                    re += "G00 Z" + saftyHeight + " \r\n";
                }

                
            }
            else if (op.panel.Controls["pocketType"].Text == "Racetrack")
            {
                decimal helix_r = 5;
                decimal x_c, y_c, z_c, x_n, y_n, z_n;
                decimal x_move, y_move;

                decimal pointsX = (Convert.ToDecimal(op.panel.Controls["pointsX1"].Text) + Convert.ToDecimal(op.panel.Controls["pointsX2"].Text)) / 2;
                decimal pointsY = (Convert.ToDecimal(op.panel.Controls["pointsY1"].Text) + Convert.ToDecimal(op.panel.Controls["pointsY2"].Text)) / 2;
                decimal startZ = Convert.ToDecimal(op.panel.Controls["startZ"].Text);
                decimal endZ = Convert.ToDecimal(op.panel.Controls["endZ"].Text);
                decimal z_step = Convert.ToDecimal(op.panel.Controls["stepDepth"].Text);
                decimal rST = Convert.ToDecimal(op.panel.Controls["roughSideThick"].Text);
                decimal fST = Convert.ToDecimal(op.panel.Controls["finishSideThick"].Text);
                string dir = op.panel.Controls["direction"].Text;

                decimal x_length = Convert.ToInt32(Convert.ToDecimal(op.panel.Controls["pointsX1"].Text) - Convert.ToDecimal(op.panel.Controls["pointsX2"].Text) - Convert.ToDecimal(op.panel.Controls["toolDia"].Text));
                decimal y_length = Convert.ToInt32(Convert.ToDecimal(op.panel.Controls["pointsY1"].Text) - Convert.ToDecimal(op.panel.Controls["pointsY2"].Text) - Convert.ToDecimal(op.panel.Controls["toolDia"].Text));

                int z_times = Convert.ToInt32(Math.Floor((startZ - endZ) / z_step));
                int xy_times;

                for (int i = 0; i < z_times; i++)
                {
                    if (dir == "Vertical")
                    {
                        xy_times = Convert.ToInt32(Math.Abs(Math.Floor(x_length - 2 * fST) / (2 * rST)));
                        x_move = 0;
                        y_move = (y_length - x_length) / 2;
                    }
                    else
                    {
                        xy_times = Convert.ToInt32(Math.Abs(Math.Floor(y_length - 2 * fST) / (2 * rST)));
                        x_move = (x_length - y_length) / 2;
                        y_move = 0;
                    }

                    if (i == 0)
                    {
                        x_n = pointsX;
                        y_n = pointsY;
                        z_n = startZ;
                    }
                    else
                    {
                        x_n = pointsX;
                        y_n = pointsY;
                        z_n = endZ + z_step * (z_times - i + 1) + 2;
                    }

                    re += "G01 X" + x_n + " Y" + y_n + " F" + feed + " \r\n";
                    re += "Z" + z_n + " \r\n";

                    z_c = z_n;
                    z_n = endZ + z_step * (z_times - i);
                    re += cp.Entry_Helix(pointsX, pointsY, z_c, z_n, 1, helix_r);

                    x_n = pointsX + x_move;
                    y_n = pointsY + y_move;
                    re += "G01 X" + x_n + " Y" + y_n + " F" + feed + " \r\n";

                    for (int j = 0; j < xy_times; j++)
                    {
                        if (dir == "Vertical")
                        {
                            x_c = x_n;
                            x_n = pointsX - (x_move + rST * j);
                            re += "G02 X" + x_n + " R" + Math.Abs(x_n-x_c) + " \r\n";

                            y_n = pointsY - y_length / 2;
                            re += "G01 Y" + y_n + " \r\n";

                            x_c = x_n;
                            x_n = pointsX + (x_move + rST * j);
                            re += "G02 X" + x_n + " R" + Math.Abs(x_n - x_c) + " \r\n";

                            y_n = pointsY + y_length / 2;
                            re += "G01 Y" + y_n + " \r\n";
                        }
                        else if (dir == "Horizontal")
                        {
                            y_c = y_n;
                            y_n = pointsY - (y_move + rST * j);
                            re += "G02 Y" + y_n + " R" + Math.Abs(y_n - y_c) + " \r\n";

                            x_n = pointsX - x_length / 2;
                            re += "G01 X" + x_n + " \r\n";

                            y_c = y_n;
                            y_n = pointsY + (y_move + rST * j);
                            re += "G02 Y" + y_n + " R" + Math.Abs(y_n - y_c) + " \r\n";

                            x_n = pointsX + x_length / 2;
                            re += "G01 X" + x_n + " \r\n";
                        }
                    }
                    if (dir == "Vertical")
                    {
                        x_c = x_n;
                        x_n = pointsX - x_length / 2;
                        re += "G02 X" + x_n + " R" + Math.Abs(x_n - x_c) + " \r\n";

                        y_n = pointsY - y_length / 2;
                        re += "G01 Y" + y_n + " \r\n";

                        x_c = x_n;
                        x_n = pointsX + x_length / 2;
                        re += "G02 X" + x_n + " R" + Math.Abs(x_n - x_c) + " \r\n";

                        y_n = pointsY + y_length / 2;
                        re += "G01 Y" + y_n + " \r\n";

                        x_c = x_n;
                        x_n = pointsX - x_length / 2;
                        re += "G02 X" + x_n + " R" + Math.Abs(x_n - x_c) + " \r\n";
                    }
                    else if (dir == "Horizontal")
                    {
                        y_c = y_n;
                        y_n = pointsY - y_length / 2;
                        re += "G02 Y" + y_n + " R" + Math.Abs(y_n - y_c) + " \r\n";

                        x_n = pointsX - x_length / 2;
                        re += "G01 X" + x_n + " \r\n";

                        y_c = y_n;
                        y_n = pointsY + y_length / 2;
                        re += "G02 Y" + y_n + " R" + Math.Abs(y_n - y_c) + " \r\n";

                        x_n = pointsX + x_length / 2;
                        re += "G01 X" + x_n + " \r\n";

                        y_c = y_n;
                        y_n = pointsY - y_length / 2;
                        re += "G02 Y" + y_n + " R" + Math.Abs(y_n - y_c) + " \r\n";
                    }

                    re += "G00 Z" + saftyHeight + " \r\n";
                }
            }
            
            return re;
        }

        private string code_foot(Op gen)
        {
            string re = " \r\n" +
                        "G90 G00 Z50 \r\n" +
                        "M09 \r\n" +
                        "G00 G91 G28 Z0 \r\n" +
                        "M05 \r\n" +
                        " \r\n" +
                        "M30 \r\n" +
                        "% \r\n";

            return re;
        }

        private void btn_load_Click(object sender, EventArgs e)
        {
            OpenFileDialog file = new OpenFileDialog();
            file.InitialDirectory = "./";
            file.Filter = "xml files (*.xml)|*.xml";
            file.FilterIndex = 1;
            file.Multiselect = false;
            file.Title = "Save NC code";
            if (file.ShowDialog() == DialogResult.OK)
            {
                try
                {
                    XmlSerializer xs = new XmlSerializer(typeof(Data));
                    using (var sr = new StreamReader(file.FileName))
                    {
                        data = (Data)xs.Deserialize(sr);
                    }
                    oplist.Clear();
                    OpListBox.Items.Clear();
                    detailZone.Controls.Clear();
                    serial = data.serial;
                    detailZone.Controls.Add(addOp);
                    ready = false;
                    for (int i = 0; i < data.ls.Count; i++)
                    {
                        if (data.ls.ElementAt(i)[0] == "General")
                        {
                            Op gen = new Op(detailZone, data.ls.ElementAt(i));
                            OpListBox.Items.Add("General");
                            oplist.Add(gen);
                        }
                        else
                        {
                            Op op = new Op(detailZone, data.ls.ElementAt(i));
                            oplist.Add(op);
                            OpListBox.Items.Add(data.ls.ElementAt(i)[1]);
                        }
                    }
                    ready = true;
                }
                catch { }
            }
        }

        private void btn_save_Click(object sender, EventArgs e)
        {
            SaveFileDialog file = new SaveFileDialog();
            file.InitialDirectory = "./";
            file.Filter = "xml files (*.xml)|*.xml";
            file.FilterIndex = 1;
            file.Title = "Save NC code";
            file.ShowHelp = true;
            file.FileName = oplist.Find(p => p.Id == "General").panel.Controls["project"].Text + ".xml";
            if (file.ShowDialog() == DialogResult.OK)
            {
                XmlSerializer xs = new XmlSerializer(typeof(Data));
                data = new Data();
                data.serial = serial;
                for (int i = 0; i < OpListBox.Items.Count; i++)
                {
                    data.ls.Add(oplist.Find(p => p.Id == OpListBox.Items[i].ToString()).project_save());

                }
                using (TextWriter tw = new StreamWriter(file.FileName))
                {
                    xs.Serialize(tw, data);
                }
                try
                {
                    
                }
                catch { }
            }
        }

        private void btn_hole_Click(object sender, EventArgs e)
        {
            Op op = new Op(detailZone, "Hole", "Hole-" + serial.ToString());
            oplist.Add(op);
            OpListBox.Items.Add("Hole-" + serial.ToString());
            serial++;
        }

        private void btn_pocket_Click(object sender, EventArgs e)
        {
            Op op = new Op(detailZone, "Pocket", "Pocket-" + serial.ToString());
            oplist.Add(op);
            OpListBox.Items.Add("Pocket-" + serial.ToString());
            serial++;
        }

    }

    public class CodePack
    {

        public string Entry_Helix(decimal x, decimal y, decimal z_start, decimal z_end, decimal pitch, decimal radius)
        {
            string re = "";

            int times = Convert.ToInt32(Math.Floor(Math.Abs(z_start - z_end) / pitch));
            decimal z_t = z_start;
            
            re += " \r\n";
            re += "G01 X" + x.ToString() + " Y" + y.ToString() + " Z" + z_start.ToString() + " \r\n";
            re += "G02 Y" + Math.Round(y + radius / 2, 3).ToString() + " R" + radius.ToString() + " \r\n";

            while (z_t>z_end+pitch)
            {
                z_t -= pitch;
                re += "G02 J-" + radius.ToString() + " Z" + z_t.ToString() + " \r\n";
            }

            re += "G02 J-" + radius.ToString() + " Z" + z_end.ToString() + " \r\n";
            re += "G02 Y" + y.ToString() + " R" + radius.ToString() + " \r\n";
            re += " \r\n";

            return re;
        }
    }

    [Serializable]
    public class Data
    {
        public List<string[]> ls = new List<string[]>();
        public int serial = 0;
    }

    public class Op
    {

        public Panel panel = new Panel();
        public string Method;
        public string Id;

        public Op(Panel parent, string Method, string Id)
        {
            this.Method = Method;
            this.Id = Id;
            string[] param = { "" };

            parent.Controls.Add(panel);
            panel.Dock = DockStyle.Fill;
            if(Method == "General")
            {
                General_ini(param);
            }
            else if(Method == "Hole")
            {
                Hole_ini(param);
            }
            else if (Method == "Pocket")
            {
                Pocket_ini(param);
            }
            panel.BringToFront();
        }

        public Op(Panel parent, string[] param)
        {
            this.Method = param[0];
            this.Id = param[1];

            parent.Controls.Add(panel);
            panel.Dock = DockStyle.Fill;
            if (Method == "General")
            {
                General_ini(param);
            }
            else if (Method == "Hole")
            {
                Hole_ini(param);
            }
            else if (Method == "Pocket")
            {
                Pocket_ini(param);
            }
            panel.BringToFront();
        }

        public void General_ini(string[] param)
        {
            int[] column = { 10, 110 };
            int[] row = { 10, 40, 70, 100, 130, 160, 190, 220, 250, 280 };

            Label project_t = new Label();
            project_t.Location = new Point(column[0], row[0]);
            project_t.Size = new Size(100, 20);
            project_t.Text = "Project name:";
            project_t.TextAlign = ContentAlignment.MiddleRight;
            panel.Controls.Add(project_t);

            TextBox project = new TextBox();
            project.Name = "project";
            project.Location = new Point(column[1], row[0]);
            project.Size = new Size(300, 20);
            project.Text = "Unnamed";
            if(param[0] != "")
                if(param[2]!="")
                    project.Text = param[2];
            panel.Controls.Add(project);

            Label workCoord_t = new Label();
            workCoord_t.Location = new Point(column[0], row[1]);
            workCoord_t.Size = new Size(100, 20);
            workCoord_t.Text = "Work Coord:";
            workCoord_t.TextAlign = ContentAlignment.MiddleRight;
            panel.Controls.Add(workCoord_t);

            ComboBox workCoord = new ComboBox();
            workCoord.Name = "workCoord";
            workCoord.Location = new Point(column[1], row[1]);
            workCoord.Size = new Size(100, 20);
            workCoord.Items.Add("G54");
            workCoord.Items.Add("G55");
            workCoord.Items.Add("G56");
            workCoord.Items.Add("G57");
            workCoord.Items.Add("G58");
            workCoord.Items.Add("G59");
            workCoord.SelectedItem = "G54";
            if (param[0] != "") 
                if (param[3] != "")
                    workCoord.SelectedItem = param[3];
            panel.Controls.Add(workCoord);

            Label coolant_t = new Label();
            coolant_t.Location = new Point(column[0], row[3]);
            coolant_t.Size = new Size(100, 20);
            coolant_t.Text = "Coolent:";
            coolant_t.TextAlign = ContentAlignment.MiddleRight;
            panel.Controls.Add(coolant_t);

            ComboBox coolant = new ComboBox();
            coolant.Name = "coolant";
            coolant.Location = new Point(column[1], row[3]);
            coolant.Size = new Size(100, 20);
            coolant.Items.Add("Yes");
            coolant.Items.Add("No");
            coolant.SelectedItem = "Yes";
            if (param[0] != "")
                if (param[5] != "")
                    coolant.SelectedItem = param[5];
            panel.Controls.Add(coolant);

            Label aicc_t = new Label();
            aicc_t.Location = new Point(column[0], row[4]);
            aicc_t.Size = new Size(100, 20);
            aicc_t.Text = "AiccII:";
            aicc_t.TextAlign = ContentAlignment.MiddleRight;
            panel.Controls.Add(aicc_t);

            ComboBox aicc = new ComboBox();
            aicc.Name = "aicc";
            aicc.Location = new Point(column[1], row[4]);
            aicc.Size = new Size(100, 20);
            aicc.Items.Add("Yes");
            aicc.Items.Add("No");
            aicc.SelectedItem = "Yes";
            if (param[0] != "")
                if (param[6] != "")
                    aicc.SelectedItem = param[6];
            panel.Controls.Add(aicc);

        }

        public void Hole_ini(string[] param)
        {
            int[] column = { 10, 110, 135, 210, 235, 320, 380};
            int[] row = { 10, 40, 70, 100, 130, 160, 190, 220, 250, 280, 310, 340 };
            //row 0
            Label type_t = new Label();
            type_t.Location = new Point(column[0], row[0]);
            type_t.Size = new Size(100, 20);
            type_t.Text = "Hole Type:";
            type_t.TextAlign = ContentAlignment.MiddleRight;
            panel.Controls.Add(type_t);

            ComboBox holeType = new ComboBox();
            holeType.Name = "holeType";
            holeType.Location = new Point(column[1], row[0]);
            holeType.Size = new Size(100, 20);
            holeType.Items.Add("Drill");
            holeType.Items.Add("Reaming");
            holeType.Items.Add("Boring");
            holeType.Items.Add("Tapping");
            holeType.SelectedItem = "Drill";
            if (param[0] != "")
                if (param[7] != "")
                    holeType.SelectedItem = param[7];
            holeType.SelectedIndexChanged += new EventHandler(Hole_type_choose);
            panel.Controls.Add(holeType);

            Label workCoord_t = new Label();
            workCoord_t.Location = new Point(column[3], row[0]);
            workCoord_t.Size = new Size(100, 20);
            workCoord_t.Text = "Work Coord:";
            workCoord_t.TextAlign = ContentAlignment.MiddleRight;
            panel.Controls.Add(workCoord_t);

            ComboBox workCoord = new ComboBox();
            workCoord.Name = "workCoord";
            workCoord.Location = new Point(column[5], row[0]);
            workCoord.Size = new Size(100, 20);
            workCoord.Items.Add("Default");
            workCoord.Items.Add("G54");
            workCoord.Items.Add("G55");
            workCoord.Items.Add("G56");
            workCoord.Items.Add("G57");
            workCoord.Items.Add("G58");
            workCoord.Items.Add("G59");
            workCoord.SelectedItem = "Default";
            if (param[0] != "")
                if (param[3] != "")
                    workCoord.SelectedItem = param[3];
            panel.Controls.Add(workCoord);

            Label returnTo_t = new Label();
            returnTo_t.Location = new Point(column[0], row[1]);
            returnTo_t.Size = new Size(100, 20);
            returnTo_t.Text = "Return To:";
            returnTo_t.TextAlign = ContentAlignment.MiddleRight;
            panel.Controls.Add(returnTo_t);

            ComboBox returnTo = new ComboBox();
            returnTo.Name = "returnTo";
            returnTo.Location = new Point(column[1], row[1]);
            returnTo.Size = new Size(100, 20);
            returnTo.Items.Add("Safty height");
            returnTo.Items.Add("Initial height");
            returnTo.SelectedItem = "Initial height";
            if (param[0] != "")
                if (param[8] != "")
                    returnTo.SelectedItem = param[8];
            panel.Controls.Add(returnTo);

            Label safetyHeight_t = new Label();
            safetyHeight_t.Location = new Point(column[3], row[1]);
            safetyHeight_t.Size = new Size(100, 20);
            safetyHeight_t.Text = "Safety Height:";
            safetyHeight_t.TextAlign = ContentAlignment.MiddleRight;
            panel.Controls.Add(safetyHeight_t);

            NumericUpDown safetyHeight = new NumericUpDown();
            safetyHeight.Name = "safetyHeight";
            safetyHeight.Location = new Point(column[5], row[1]);
            safetyHeight.Size = new Size(100, 20);
            safetyHeight.Minimum = 0;
            safetyHeight.Maximum = 1000;
            safetyHeight.DecimalPlaces = 3;
            safetyHeight.Value = 20;
            if (param[0] != "")
                if (param[4] != "")
                    safetyHeight.Value = Convert.ToDecimal(param[4]);
            panel.Controls.Add(safetyHeight);

            Label coolant_t = new Label();
            coolant_t.Location = new Point(column[0], row[2]);
            coolant_t.Size = new Size(100, 20);
            coolant_t.Text = "Coolent:";
            coolant_t.TextAlign = ContentAlignment.MiddleRight;
            panel.Controls.Add(coolant_t);

            ComboBox coolant = new ComboBox();
            coolant.Name = "coolant";
            coolant.Location = new Point(column[1], row[2]);
            coolant.Size = new Size(100, 20);
            coolant.Items.Add("Yes");
            coolant.Items.Add("No");
            coolant.SelectedItem = "Yes";
            if (param[0] != "")
                if (param[5] != "")
                    coolant.SelectedItem = param[5];
            panel.Controls.Add(coolant);

            Label toolNum_t = new Label();
            toolNum_t.Location = new Point(column[3], row[2]);
            toolNum_t.Size = new Size(100, 20);
            toolNum_t.Text = "Tool Number:";
            toolNum_t.TextAlign = ContentAlignment.MiddleRight;
            panel.Controls.Add(toolNum_t);

            NumericUpDown toolNum = new NumericUpDown();
            toolNum.Name = "toolNum";
            toolNum.Location = new Point(column[5], row[2]);
            toolNum.Size = new Size(100, 20);
            toolNum.Minimum = 0;
            toolNum.Maximum = 100;
            toolNum.Value = 1;
            if (param[0] != "")
                if (param[12] != "")
                    toolNum.Value = Convert.ToInt32(param[12]);
            panel.Controls.Add(toolNum);

            Label depth_t = new Label();
            depth_t.Location = new Point(column[0], row[3]);
            depth_t.Size = new Size(100, 20);
            depth_t.Text = "Depth:";
            depth_t.TextAlign = ContentAlignment.MiddleRight;
            panel.Controls.Add(depth_t);

            NumericUpDown depth = new NumericUpDown();
            depth.Name = "depth";
            depth.Location = new Point(column[1], row[3]);
            depth.Size = new Size(100, 20);
            depth.Minimum = -1000;
            depth.Maximum = 0;
            depth.DecimalPlaces = 3;
            depth.Value = -10;
            if (param[0] != "")
                if (param[13] != "")
                    depth.Value = Convert.ToDecimal(param[13]);
            panel.Controls.Add(depth);

            Label peckDepth_t = new Label();
            peckDepth_t.Location = new Point(column[3], row[3]);
            peckDepth_t.Size = new Size(100, 20);
            peckDepth_t.Text = "Peck Depth:";
            peckDepth_t.TextAlign = ContentAlignment.MiddleRight;
            panel.Controls.Add(peckDepth_t);

            NumericUpDown peckDepth = new NumericUpDown();
            peckDepth.Name = "peckDepth";
            peckDepth.Location = new Point(column[5], row[3]);
            peckDepth.Size = new Size(100, 20);
            peckDepth.Minimum = 0;
            peckDepth.Maximum = 1000;
            peckDepth.DecimalPlaces = 3;
            peckDepth.Value = 3;
            if (param[0] != "")
                if (param[9] != "")
                    peckDepth.Value = Convert.ToDecimal(param[9]);
            panel.Controls.Add(peckDepth);

            Label deepHole_t = new Label();
            deepHole_t.Location = new Point(column[0], row[4]);
            deepHole_t.Size = new Size(100, 20);
            deepHole_t.Text = "Deep Hole:";
            deepHole_t.TextAlign = ContentAlignment.MiddleRight;
            panel.Controls.Add(deepHole_t);

            ComboBox deepHole = new ComboBox();
            deepHole.Name = "deepHole";
            deepHole.Location = new Point(column[1], row[4]);
            deepHole.Size = new Size(100, 20);
            deepHole.Items.Add("Yes");
            deepHole.Items.Add("No");
            deepHole.SelectedItem = "Yes";
            if (param[0] != "")
                if (param[16] != "")
                    deepHole.SelectedItem = param[16];
            panel.Controls.Add(deepHole);

            Label pauseTime_t = new Label();
            pauseTime_t.Location = new Point(column[3], row[4]);
            pauseTime_t.Size = new Size(100, 20);
            pauseTime_t.Text = "Pause Time:";
            pauseTime_t.TextAlign = ContentAlignment.MiddleRight;
            panel.Controls.Add(pauseTime_t);

            NumericUpDown pauseTime = new NumericUpDown();
            pauseTime.Name = "pauseTime";
            pauseTime.Location = new Point(column[5], row[4]);
            pauseTime.Size = new Size(100, 20);
            pauseTime.Minimum = 0;
            pauseTime.Maximum = 100;
            pauseTime.Value = 0;
            if (param[0] != "")
                if (param[15] != "")
                    pauseTime.Value = Convert.ToInt32(param[15]);
            panel.Controls.Add(pauseTime);

            Label boringDeltaX_t = new Label();
            boringDeltaX_t.Location = new Point(column[0], row[5]);
            boringDeltaX_t.Size = new Size(100, 20);
            boringDeltaX_t.Text = "Boring Delta X:";
            boringDeltaX_t.TextAlign = ContentAlignment.MiddleRight;
            panel.Controls.Add(boringDeltaX_t);

            NumericUpDown boringDeltaX = new NumericUpDown();
            boringDeltaX.Name = "boringDeltaX";
            boringDeltaX.Location = new Point(column[1], row[5]);
            boringDeltaX.Size = new Size(100, 20);
            boringDeltaX.Minimum = 0;
            boringDeltaX.Maximum = 100;
            boringDeltaX.DecimalPlaces = 3;
            boringDeltaX.Value = 0.1M;
            if (param[0] != "")
                if (param[10] != "")
                    boringDeltaX.Value = Convert.ToDecimal(param[17]);
            boringDeltaX.Enabled = false;
            panel.Controls.Add(boringDeltaX);

            Label spindlespeed_t = new Label();
            spindlespeed_t.Location = new Point(column[0], row[6]);
            spindlespeed_t.Size = new Size(100, 20);
            spindlespeed_t.Text = "Spindle Speed:";
            spindlespeed_t.TextAlign = ContentAlignment.MiddleRight;
            panel.Controls.Add(spindlespeed_t);

            NumericUpDown spindleSpeed = new NumericUpDown();
            spindleSpeed.Name = "spindleSpeed";
            spindleSpeed.Location = new Point(column[1], row[6]);
            spindleSpeed.Size = new Size(100, 20); 
            spindleSpeed.Minimum = 0;
            spindleSpeed.Maximum = 20000;
            spindleSpeed.Value = 1000;
            if (param[0] != "")
                if (param[10] != "")
                    spindleSpeed.Value = Convert.ToInt32(param[10]);
            panel.Controls.Add(spindleSpeed);

            Label feedRate_t = new Label();
            feedRate_t.Location = new Point(column[3], row[6]);
            feedRate_t.Size = new Size(100, 20);
            feedRate_t.Text = "Feed Rate:";
            feedRate_t.TextAlign = ContentAlignment.MiddleRight;
            panel.Controls.Add(feedRate_t);

            NumericUpDown feedRate = new NumericUpDown();
            feedRate.Name = "feedRate";
            feedRate.Location = new Point(column[5], row[6]);
            feedRate.Size = new Size(100, 20);
            feedRate.Minimum = 0;
            feedRate.Maximum = 10000;
            feedRate.Value = 100;
            if (param[0] != "")
                if (param[11] != "")
                    feedRate.Value = Convert.ToInt32(param[11]);
            panel.Controls.Add(feedRate);

            Label points_t = new Label();
            points_t.Location = new Point(column[0], row[7]);
            points_t.Size = new Size(100, 20);
            points_t.Text = "Points:";
            points_t.TextAlign = ContentAlignment.MiddleRight;
            panel.Controls.Add(points_t);

            Label pointsX_t = new Label();
            pointsX_t.Location = new Point(column[1], row[7]);
            pointsX_t.Size = new Size(25, 20);
            pointsX_t.Text = "X:";
            pointsX_t.TextAlign = ContentAlignment.MiddleCenter;
            panel.Controls.Add(pointsX_t);

            NumericUpDown pointsX = new NumericUpDown();
            pointsX.Name = "pointsX";
            pointsX.Location = new Point(column[2], row[7]);
            pointsX.Size = new Size(75, 20);
            pointsX.Minimum = -2000;
            pointsX.Maximum = 2000;
            pointsX.DecimalPlaces = 3;
            pointsX.Value = 0;
            panel.Controls.Add(pointsX);

            Label pointsY_t = new Label();
            pointsY_t.Location = new Point(column[3], row[7]);
            pointsY_t.Size = new Size(25, 20);
            pointsY_t.Text = "Y:";
            pointsY_t.TextAlign = ContentAlignment.MiddleCenter;
            panel.Controls.Add(pointsY_t);

            NumericUpDown pointsY = new NumericUpDown();
            pointsY.Name = "pointsY";
            pointsY.Location = new Point(column[4], row[7]);
            pointsY.Size = new Size(75, 20);
            pointsY.Minimum = -2000;
            pointsY.Maximum = 2000;
            pointsY.DecimalPlaces = 3;
            pointsY.Value = 0;
            panel.Controls.Add(pointsY);

            Button points_update = new Button();
            points_update.Name = "points_update";
            points_update.Location = new Point(column[5], row[7]);
            points_update.Size = new Size(50, 22);
            points_update.Text = "Update";
            points_update.Click += new EventHandler(this.update_click);
            panel.Controls.Add(points_update);

            Button points_add = new Button();
            points_add.Name = "points_add";
            points_add.Location = new Point(column[6], row[7]);
            points_add.Size = new Size(50, 22);
            points_add.Text = "Add";
            points_add.Click += new EventHandler(this.add_click);
            panel.Controls.Add(points_add);

            ListBox points = new ListBox();
            points.Name = "points";
            points.Location = new Point(column[1], row[8]);
            points.Size = new Size(200, 200);
            if (param[0] != "")
                if (param[14] != "")
                {
                    string[] pts = param[14].Split(';');
                    for (int i = 0; i < pts.Length; i++)
                        points.Items.Add(pts[i]);
                }
            panel.Controls.Add(points);
        }

        public void Hole_type_choose(object sender, System.EventArgs e)
        {
            ComboBox holeType = (ComboBox) sender;
            if(holeType.SelectedItem.ToString() == "Drill")
            {
                panel.Controls["peckDepth"].Enabled = true;
                panel.Controls["pauseTime"].Enabled = true;
                panel.Controls["deepHole"].Enabled = true;
                panel.Controls["boringDeltaX"].Enabled = false;
            }
            else if (holeType.SelectedItem.ToString() == "Reaming")
            {
                panel.Controls["peckDepth"].Enabled = false;
                panel.Controls["pauseTime"].Enabled = true;
                panel.Controls["deepHole"].Enabled = false;
                panel.Controls["boringDeltaX"].Enabled = false;
            }
            else if (holeType.SelectedItem.ToString() == "Boring")
            {
                panel.Controls["peckDepth"].Enabled = false;
                panel.Controls["pauseTime"].Enabled = false;
                panel.Controls["deepHole"].Enabled = false;
                panel.Controls["boringDeltaX"].Enabled = true;
            }
            else if (holeType.SelectedItem.ToString() == "Tapping")
            {
                panel.Controls["peckDepth"].Enabled = true;
                panel.Controls["pauseTime"].Enabled = false;
                panel.Controls["deepHole"].Enabled = false;
                panel.Controls["boringDeltaX"].Enabled = false;
            }
        }

        public void Pocket_ini(string[] param)
        {
            int[] column = { 10, 110, 135, 210, 235, 320, 380 };
            int[] row = { 10, 40, 70, 100, 130, 160, 190, 220, 250, 280, 310, 340 };

            //climb=down=CW
            //row 0
            Label type_t = new Label();
            type_t.Location = new Point(column[0], row[0]);
            type_t.Size = new Size(100, 20);
            type_t.Text = "Pocket Type:";
            type_t.TextAlign = ContentAlignment.MiddleRight;
            panel.Controls.Add(type_t);

            ComboBox pocketType = new ComboBox();
            pocketType.Name = "pocketType";
            pocketType.Location = new Point(column[1], row[0]);
            pocketType.Size = new Size(100, 20);
            pocketType.Items.Add("Rectangular");
            pocketType.Items.Add("Circle");
            pocketType.Items.Add("Racetrack");
            pocketType.SelectedItem = "Rectangular";
            if (param[0] != "")
                if (param[18] != "")
                    pocketType.SelectedItem = param[18];
            
            panel.Controls.Add(pocketType);

            Label workCoord_t = new Label();
            workCoord_t.Location = new Point(column[3], row[0]);
            workCoord_t.Size = new Size(100, 20);
            workCoord_t.Text = "Work Coord:";
            workCoord_t.TextAlign = ContentAlignment.MiddleRight;
            panel.Controls.Add(workCoord_t);

            ComboBox workCoord = new ComboBox();
            workCoord.Name = "workCoord";
            workCoord.Location = new Point(column[5], row[0]);
            workCoord.Size = new Size(100, 20);
            workCoord.Items.Add("Default");
            workCoord.Items.Add("G54");
            workCoord.Items.Add("G55");
            workCoord.Items.Add("G56");
            workCoord.Items.Add("G57");
            workCoord.Items.Add("G58");
            workCoord.Items.Add("G59");
            workCoord.SelectedItem = "Default";
            if (param[0] != "")
                if (param[3] != "")
                    workCoord.SelectedItem = param[3];
            panel.Controls.Add(workCoord);

            Label safetyHeight_t = new Label();
            safetyHeight_t.Location = new Point(column[0], row[1]);
            safetyHeight_t.Size = new Size(100, 20);
            safetyHeight_t.Text = "Safety Height:";
            safetyHeight_t.TextAlign = ContentAlignment.MiddleRight;
            panel.Controls.Add(safetyHeight_t);

            NumericUpDown safetyHeight = new NumericUpDown();
            safetyHeight.Name = "safetyHeight";
            safetyHeight.Location = new Point(column[1], row[1]);
            safetyHeight.Size = new Size(100, 20);
            safetyHeight.Minimum = 0;
            safetyHeight.Maximum = 1000;
            safetyHeight.DecimalPlaces = 3;
            safetyHeight.Value = 20;
            if (param[0] != "")
                if (param[4] != "")
                    safetyHeight.Value = Convert.ToDecimal(param[4]);
            panel.Controls.Add(safetyHeight);

            Label coolant_t = new Label();
            coolant_t.Location = new Point(column[3], row[1]);
            coolant_t.Size = new Size(100, 20);
            coolant_t.Text = "Coolent:";
            coolant_t.TextAlign = ContentAlignment.MiddleRight;
            panel.Controls.Add(coolant_t);

            ComboBox coolant = new ComboBox();
            coolant.Name = "coolant";
            coolant.Location = new Point(column[5], row[1]);
            coolant.Size = new Size(100, 20);
            coolant.Items.Add("Yes");
            coolant.Items.Add("No");
            coolant.SelectedItem = "Yes";
            if (param[0] != "")
                if (param[5] != "")
                    coolant.SelectedItem = param[5];
            panel.Controls.Add(coolant);

            Label toolNum_t = new Label();
            toolNum_t.Location = new Point(column[0], row[2]);
            toolNum_t.Size = new Size(100, 20);
            toolNum_t.Text = "Tool Number:";
            toolNum_t.TextAlign = ContentAlignment.MiddleRight;
            panel.Controls.Add(toolNum_t);

            NumericUpDown toolNum = new NumericUpDown();
            toolNum.Name = "toolNum";
            toolNum.Location = new Point(column[1], row[2]);
            toolNum.Size = new Size(100, 20);
            toolNum.Minimum = 0;
            toolNum.Maximum = 100;
            toolNum.Value = 1;
            if (param[0] != "")
                if (param[12] != "")
                    toolNum.Value = Convert.ToInt32(param[12]);
            panel.Controls.Add(toolNum);

            Label toolDia_t = new Label();
            toolDia_t.Location = new Point(column[3], row[2]);
            toolDia_t.Size = new Size(100, 20);
            toolDia_t.Text = "Tool Diameter:";
            toolDia_t.TextAlign = ContentAlignment.MiddleRight;
            panel.Controls.Add(toolDia_t);

            NumericUpDown toolDia = new NumericUpDown();
            toolDia.Name = "toolDia";
            toolDia.Location = new Point(column[5], row[2]);
            toolDia.Size = new Size(100, 20);
            toolDia.Minimum = 0;
            toolDia.Maximum = 100;
            toolDia.Value = 10;
            if (param[0] != "")
                if (param[35] != "")
                    toolDia.Value = Convert.ToInt32(param[35]);
            panel.Controls.Add(toolDia);

            Label startZ_t = new Label();
            startZ_t.Location = new Point(column[0], row[3]);
            startZ_t.Size = new Size(100, 20);
            startZ_t.Text = "Start Z:";
            startZ_t.TextAlign = ContentAlignment.MiddleRight;
            panel.Controls.Add(startZ_t);

            NumericUpDown startZ = new NumericUpDown();
            startZ.Name = "startZ";
            startZ.Location = new Point(column[1], row[3]);
            startZ.Size = new Size(100, 20);
            startZ.Minimum = -1000;
            startZ.Maximum = 1000;
            startZ.DecimalPlaces = 3;
            startZ.Value = 0;
            if (param[0] != "")
                if (param[21] != "")
                    startZ.Value = Convert.ToDecimal(param[21]);
            panel.Controls.Add(startZ);

            Label endZ_t = new Label();
            endZ_t.Location = new Point(column[3], row[3]);
            endZ_t.Size = new Size(100, 20);
            endZ_t.Text = "End Z:";
            endZ_t.TextAlign = ContentAlignment.MiddleRight;
            panel.Controls.Add(endZ_t);

            NumericUpDown endZ = new NumericUpDown();
            endZ.Name = "endZ";
            endZ.Location = new Point(column[5], row[3]);
            endZ.Size = new Size(100, 20);
            endZ.Minimum = -1000;
            endZ.Maximum = 1000;
            endZ.DecimalPlaces = 3;
            endZ.Value = -10;
            if (param[0] != "")
                if (param[22] != "")
                    endZ.Value = Convert.ToDecimal(param[22]);
            panel.Controls.Add(endZ);

            Label stepDepth_t = new Label();
            stepDepth_t.Location = new Point(column[0], row[4]);
            stepDepth_t.Size = new Size(100, 20);
            stepDepth_t.Text = "Step Depth:";
            stepDepth_t.TextAlign = ContentAlignment.MiddleRight;
            panel.Controls.Add(stepDepth_t);

            NumericUpDown stepDepth = new NumericUpDown();
            stepDepth.Name = "stepDepth";
            stepDepth.Location = new Point(column[1], row[4]);
            stepDepth.Size = new Size(100, 20);
            stepDepth.Minimum = 0;
            stepDepth.Maximum = 1000;
            stepDepth.DecimalPlaces = 3;
            stepDepth.Value = 3;
            if (param[0] != "")
                if (param[19] != "")
                    stepDepth.Value = Convert.ToDecimal(param[19]);
            panel.Controls.Add(stepDepth);


            Label millType_t = new Label();
            millType_t.Location = new Point(column[3], row[4]);
            millType_t.Size = new Size(100, 20);
            millType_t.Text = "Mill Type:";
            millType_t.TextAlign = ContentAlignment.MiddleRight;
            panel.Controls.Add(millType_t);

            ComboBox millType = new ComboBox();
            millType.Name = "millType";
            millType.Location = new Point(column[5], row[4]);
            millType.Size = new Size(100, 20);
            millType.Items.Add("Up Mill");
            millType.Items.Add("Down Mill");
            millType.SelectedItem = "Down Mill";
            if (param[0] != "")
                if (param[20] != "")
                    millType.SelectedItem = param[20];
            panel.Controls.Add(millType);


            Label roughSideThick_t = new Label();
            roughSideThick_t.Location = new Point(column[0], row[5]);
            roughSideThick_t.Size = new Size(100, 20);
            roughSideThick_t.Text = "Rough Side Thick:";
            roughSideThick_t.TextAlign = ContentAlignment.MiddleRight;
            panel.Controls.Add(roughSideThick_t);

            NumericUpDown roughSideThick = new NumericUpDown();
            roughSideThick.Name = "roughSideThick";
            roughSideThick.Location = new Point(column[1], row[5]);
            roughSideThick.Size = new Size(100, 20);
            roughSideThick.Minimum = 0;
            roughSideThick.Maximum = 1000;
            roughSideThick.DecimalPlaces = 3;
            roughSideThick.Value = 3;
            if (param[0] != "")
                if (param[23] != "")
                    roughSideThick.Value = Convert.ToDecimal(param[23]);
            panel.Controls.Add(roughSideThick);

            Label finishSideThick_t = new Label();
            finishSideThick_t.Location = new Point(column[3], row[5]);
            finishSideThick_t.Size = new Size(100, 20);
            finishSideThick_t.Text = "Finish Side Thick:";
            finishSideThick_t.TextAlign = ContentAlignment.MiddleRight;
            panel.Controls.Add(finishSideThick_t);

            NumericUpDown finishSideThick = new NumericUpDown();
            finishSideThick.Name = "finishSideThick";
            finishSideThick.Location = new Point(column[5], row[5]);
            finishSideThick.Size = new Size(100, 20);
            finishSideThick.Minimum = 0;
            finishSideThick.Maximum = 1000;
            finishSideThick.DecimalPlaces = 3;
            finishSideThick.Value = 3;
            if (param[0] != "")
                if (param[24] != "")
                    finishSideThick.Value = Convert.ToDecimal(param[24]);
            panel.Controls.Add(finishSideThick);

            Label roughZThick_t = new Label();
            roughZThick_t.Location = new Point(column[0], row[6]);
            roughZThick_t.Size = new Size(100, 20);
            roughZThick_t.Text = "Rough Z Thick:";
            roughZThick_t.TextAlign = ContentAlignment.MiddleRight;
            panel.Controls.Add(roughZThick_t);

            NumericUpDown roughZThick = new NumericUpDown();
            roughZThick.Name = "roughZThick";
            roughZThick.Location = new Point(column[1], row[6]);
            roughZThick.Size = new Size(100, 20);
            roughZThick.Minimum = 0;
            roughZThick.Maximum = 1000;
            roughZThick.DecimalPlaces = 3;
            roughZThick.Value = 3;
            if (param[0] != "")
                if (param[25] != "")
                    roughZThick.Value = Convert.ToDecimal(param[25]);
            panel.Controls.Add(roughZThick);

            Label finishZThick_t = new Label();
            finishZThick_t.Location = new Point(column[3], row[6]);
            finishZThick_t.Size = new Size(100, 20);
            finishZThick_t.Text = "Finish Z Thick:";
            finishZThick_t.TextAlign = ContentAlignment.MiddleRight;
            panel.Controls.Add(finishZThick_t);

            NumericUpDown finishZThick = new NumericUpDown();
            finishZThick.Name = "finishZThick";
            finishZThick.Location = new Point(column[5], row[6]);
            finishZThick.Size = new Size(100, 20);
            finishZThick.Minimum = 0;
            finishZThick.Maximum = 1000;
            finishZThick.DecimalPlaces = 3;
            finishZThick.Value = 3;
            if (param[0] != "")
                if (param[26] != "")
                    finishZThick.Value = Convert.ToDecimal(param[26]);
            panel.Controls.Add(finishZThick);

            Label spindlespeed_t = new Label();
            spindlespeed_t.Location = new Point(column[0], row[7]);
            spindlespeed_t.Size = new Size(100, 20);
            spindlespeed_t.Text = "Spindle Speed:";
            spindlespeed_t.TextAlign = ContentAlignment.MiddleRight;
            panel.Controls.Add(spindlespeed_t);

            NumericUpDown spindleSpeed = new NumericUpDown();
            spindleSpeed.Name = "spindleSpeed";
            spindleSpeed.Location = new Point(column[1], row[7]);
            spindleSpeed.Size = new Size(100, 20);
            spindleSpeed.Minimum = 0;
            spindleSpeed.Maximum = 20000;
            spindleSpeed.Value = 1000;
            if (param[0] != "")
                if (param[10] != "")
                    spindleSpeed.Value = Convert.ToInt32(param[10]);
            panel.Controls.Add(spindleSpeed);

            Label feedRate_t = new Label();
            feedRate_t.Location = new Point(column[3], row[7]);
            feedRate_t.Size = new Size(100, 20);
            feedRate_t.Text = "Feed Rate:";
            feedRate_t.TextAlign = ContentAlignment.MiddleRight;
            panel.Controls.Add(feedRate_t);
            
            NumericUpDown feedRate = new NumericUpDown();
            feedRate.Name = "feedRate";
            feedRate.Location = new Point(column[5], row[7]);
            feedRate.Size = new Size(100, 20);
            feedRate.Minimum = 0;
            feedRate.Maximum = 10000;
            feedRate.Value = 100;
            if (param[0] != "")
                if (param[11] != "")
                    feedRate.Value = Convert.ToInt32(param[11]);
            panel.Controls.Add(feedRate);

            Label pointsX1_t = new Label();
            pointsX1_t.Location = new Point(column[0], row[8]);
            pointsX1_t.Size = new Size(100, 20);
            pointsX1_t.Text = "X1:";
            pointsX1_t.TextAlign = ContentAlignment.MiddleRight;
            panel.Controls.Add(pointsX1_t);

            NumericUpDown pointsX1 = new NumericUpDown();
            pointsX1.Name = "pointsX1";
            pointsX1.Location = new Point(column[1], row[8]);
            pointsX1.Size = new Size(100, 20);
            pointsX1.Minimum = -2000;
            pointsX1.Maximum = 2000;
            pointsX1.DecimalPlaces = 3;
            pointsX1.Value = 0;
            if (param[0] != "")
                if (param[27] != "")
                    pointsX1.Value = Convert.ToDecimal(param[27]);
            panel.Controls.Add(pointsX1);

            Label pointsY1_t = new Label();
            pointsY1_t.Location = new Point(column[3], row[8]);
            pointsY1_t.Size = new Size(100, 20);
            pointsY1_t.Text = "Y1:";
            pointsY1_t.TextAlign = ContentAlignment.MiddleRight;
            panel.Controls.Add(pointsY1_t);

            NumericUpDown pointsY1 = new NumericUpDown();
            pointsY1.Name = "pointsY1";
            pointsY1.Location = new Point(column[5], row[8]);
            pointsY1.Size = new Size(100, 20);
            pointsY1.Minimum = -2000;
            pointsY1.Maximum = 2000;
            pointsY1.DecimalPlaces = 3;
            pointsY1.Value = 0;
            if (param[0] != "")
                if (param[28] != "")
                    pointsY1.Value = Convert.ToDecimal(param[28]);
            panel.Controls.Add(pointsY1);

            Label pointsX2_t = new Label();
            pointsX2_t.Location = new Point(column[0], row[9]);
            pointsX2_t.Size = new Size(100, 20);
            pointsX2_t.Text = "X2:";
            pointsX2_t.TextAlign = ContentAlignment.MiddleRight;
            panel.Controls.Add(pointsX2_t);

            NumericUpDown pointsX2 = new NumericUpDown();
            pointsX2.Name = "pointsX2";
            pointsX2.Location = new Point(column[1], row[9]);
            pointsX2.Size = new Size(100, 20);
            pointsX2.Minimum = -2000;
            pointsX2.Maximum = 2000;
            pointsX2.DecimalPlaces = 3;
            pointsX2.Value = 0;
            if (param[0] != "")
                if (param[29] != "")
                    pointsX2.Value = Convert.ToDecimal(param[29]);
            panel.Controls.Add(pointsX2);

            Label pointsY2_t = new Label();
            pointsY2_t.Location = new Point(column[3], row[9]);
            pointsY2_t.Size = new Size(100, 20);
            pointsY2_t.Text = "Y2:";
            pointsY2_t.TextAlign = ContentAlignment.MiddleRight;
            panel.Controls.Add(pointsY2_t);

            NumericUpDown pointsY2 = new NumericUpDown();
            pointsY2.Name = "pointsY2";
            pointsY2.Location = new Point(column[5], row[9]);
            pointsY2.Size = new Size(100, 20);
            pointsY2.Minimum = -2000;
            pointsY2.Maximum = 2000;
            pointsY2.DecimalPlaces = 3;
            pointsY2.Value = 0;
            if (param[0] != "")
                if (param[30] != "")
                    pointsY2.Value = Convert.ToDecimal(param[30]);
            panel.Controls.Add(pointsY2);

            Label centerX_t = new Label();
            centerX_t.Location = new Point(column[0], row[10]);
            centerX_t.Size = new Size(100, 20);
            centerX_t.Text = "Center X:";
            centerX_t.TextAlign = ContentAlignment.MiddleRight;
            panel.Controls.Add(centerX_t);

            NumericUpDown centerX = new NumericUpDown();
            centerX.Name = "centerX";
            centerX.Location = new Point(column[1], row[10]);
            centerX.Size = new Size(100, 20);
            centerX.Minimum = -2000;
            centerX.Maximum = 2000;
            centerX.DecimalPlaces = 3;
            centerX.Value = 0;
            if (param[0] != "")
                if (param[31] != "")
                    centerX.Value = Convert.ToDecimal(param[31]);
            panel.Controls.Add(centerX);

            Label centerY_t = new Label();
            centerY_t.Location = new Point(column[3], row[10]);
            centerY_t.Size = new Size(100, 20);
            centerY_t.Text = "Center Y:";
            centerY_t.TextAlign = ContentAlignment.MiddleRight;
            panel.Controls.Add(centerY_t);

            NumericUpDown centerY = new NumericUpDown();
            centerY.Name = "centerY";
            centerY.Location = new Point(column[5], row[10]);
            centerY.Size = new Size(100, 20);
            centerY.Minimum = -2000;
            centerY.Maximum = 2000;
            centerY.DecimalPlaces = 3;
            centerY.Value = 0;
            if (param[0] != "")
                if (param[32] != "")
                    centerY.Value = Convert.ToDecimal(param[32]);
            panel.Controls.Add(centerY);

            Label radius_t = new Label();
            radius_t.Location = new Point(column[0], row[11]);
            radius_t.Size = new Size(100, 20);
            radius_t.Text = "Radius:";
            radius_t.TextAlign = ContentAlignment.MiddleRight;
            panel.Controls.Add(radius_t);

            NumericUpDown radius = new NumericUpDown();
            radius.Name = "radius";
            radius.Location = new Point(column[1], row[11]);
            radius.Size = new Size(100, 20);
            radius.Minimum = -2000;
            radius.Maximum = 2000;
            radius.DecimalPlaces = 3;
            radius.Value = 0;
            if (param[0] != "")
                if (param[33] != "")
                    radius.Value = Convert.ToDecimal(param[33]);
            panel.Controls.Add(radius);

            Label direction_t = new Label();
            direction_t.Location = new Point(column[3], row[11]);
            direction_t.Size = new Size(100, 20);
            direction_t.Text = "Direction:";
            direction_t.TextAlign = ContentAlignment.MiddleRight;
            panel.Controls.Add(direction_t);

            ComboBox direction = new ComboBox();
            direction.Name = "direction";
            direction.Location = new Point(column[5], row[11]);
            direction.Size = new Size(100, 20);
            direction.Items.Add("Horizontal");
            direction.Items.Add("Vertical");
            direction.SelectedItem = "Horizontal";
            if (param[0] != "")
                if (param[34] != "")
                    direction.SelectedItem = param[34];
            panel.Controls.Add(direction);
        }

        public void Pocket_type_choose(object sender, System.EventArgs e)
        {
            ComboBox PocketType = (ComboBox)sender;
            if (PocketType.SelectedItem.ToString() == "Rectangular")
            {
                panel.Controls["pointsX1"].Enabled = true;
                panel.Controls["pointsY1"].Enabled = true;
                panel.Controls["pointsX2"].Enabled = true;
                panel.Controls["pointsY2"].Enabled = true;
                panel.Controls["centerX"].Enabled = false;
                panel.Controls["centerY"].Enabled = false;
                panel.Controls["radius"].Enabled = false;
                panel.Controls["direction"].Enabled = false;
            }
            else if (PocketType.SelectedItem.ToString() == "Circle")
            {
                panel.Controls["pointsX1"].Enabled = false;
                panel.Controls["pointsY1"].Enabled = false;
                panel.Controls["pointsX2"].Enabled = false;
                panel.Controls["pointsY2"].Enabled = false;
                panel.Controls["centerX"].Enabled = true;
                panel.Controls["centerY"].Enabled = true;
                panel.Controls["radius"].Enabled = true;
                panel.Controls["direction"].Enabled = false;
            }
            else if (PocketType.SelectedItem.ToString() == "Racetrack")
            {
                panel.Controls["pointsX1"].Enabled = true;
                panel.Controls["pointsY1"].Enabled = true;
                panel.Controls["pointsX2"].Enabled = true;
                panel.Controls["pointsY2"].Enabled = true;
                panel.Controls["centerX"].Enabled = false;
                panel.Controls["centerY"].Enabled = false;
                panel.Controls["radius"].Enabled = false;
                panel.Controls["direction"].Enabled = true;
            }
        }

        private void update_click(object sender, EventArgs e)
        {
            ListBox lb = (ListBox)panel.Controls["points"];
            NumericUpDown x = (NumericUpDown)panel.Controls["pointsX"];
            NumericUpDown y = (NumericUpDown)panel.Controls["pointsY"];
            if (lb.SelectedIndex > -1 && lb.SelectedIndex < lb.Items.Count)
                lb.Items[lb.SelectedIndex] = x.Value.ToString() + "," + y.Value.ToString();
        }

        private void add_click(object sender, EventArgs e)
        {
            ListBox lb = (ListBox)panel.Controls["points"];
            NumericUpDown x = (NumericUpDown)panel.Controls["pointsX"];
            NumericUpDown y = (NumericUpDown)panel.Controls["pointsY"];
            lb.Items.Add(Math.Round(x.Value, 3).ToString() + "," + Math.Round(y.Value, 3).ToString());
        }

        public string[] project_save()
        {
            string[] param = new string[100];

            for (int i = 0; i < param.Length; i++)
            {
                param[i] = "";
            }

            param[0] = Method;
            param[1] = Id;
            if(panel.Controls.Find("project", true).Length>0)
                param[2] = panel.Controls["project"].Text;
            if (panel.Controls.Find("workCoord", true).Length > 0)
                param[3] = panel.Controls["workCoord"].Text;
            if (panel.Controls.Find("safetyHeight", true).Length > 0)
                param[4] = panel.Controls["safetyHeight"].Text;
            if (panel.Controls.Find("coolant", true).Length > 0)
                param[5] = panel.Controls["coolant"].Text;
            if (panel.Controls.Find("aicc", true).Length > 0)
                param[6] = panel.Controls["aicc"].Text;
            if (panel.Controls.Find("holeType", true).Length > 0)
                param[7] = panel.Controls["holeType"].Text;
            if (panel.Controls.Find("returnTo", true).Length > 0)
                param[8] = panel.Controls["returnTo"].Text;
            if (panel.Controls.Find("peckDepth", true).Length > 0)
                param[9] = panel.Controls["peckDepth"].Text;
            if (panel.Controls.Find("spindleSpeed", true).Length > 0)
                param[10] = panel.Controls["spindleSpeed"].Text;
            if (panel.Controls.Find("feedRate", true).Length > 0)
                param[11] = panel.Controls["feedRate"].Text;
            if (panel.Controls.Find("toolNum", true).Length > 0)
                param[12] = panel.Controls["toolNum"].Text;
            if (panel.Controls.Find("depth", true).Length > 0)
                param[13] = panel.Controls["depth"].Text;
            if (panel.Controls.Find("points", true).Length > 0)
            {
                ListBox lb = (ListBox)panel.Controls["points"];
                for (int i = 0; i < lb.Items.Count;i++ )
                    param[14] += lb.Items[i]+";";
            }
            if (panel.Controls.Find("pauseTime", true).Length > 0)
                param[15] = panel.Controls["pauseTime"].Text;
            if (panel.Controls.Find("deepHole", true).Length > 0)
                param[16] = panel.Controls["deepHole"].Text;
            if (panel.Controls.Find("boringDeltaX", true).Length > 0)
                param[17] = panel.Controls["boringDeltaX"].Text;
            if (panel.Controls.Find("pocketType", true).Length > 0)
                param[18] = panel.Controls["pocketType"].Text;
            if (panel.Controls.Find("stepDepth", true).Length > 0)
                param[19] = panel.Controls["stepDepth"].Text;
            if (panel.Controls.Find("millType", true).Length > 0)
                param[20] = panel.Controls["millType"].Text;
            if (panel.Controls.Find("startZ", true).Length > 0)
                param[21] = panel.Controls["startZ"].Text;
            if (panel.Controls.Find("endZ", true).Length > 0)
                param[22] = panel.Controls["endZ"].Text;
            if (panel.Controls.Find("roughSideThick", true).Length > 0)
                param[23] = panel.Controls["roughSideThick"].Text;
            if (panel.Controls.Find("finishSideThick", true).Length > 0)
                param[24] = panel.Controls["finishSideThick"].Text;
            if (panel.Controls.Find("roughZThick", true).Length > 0)
                param[25] = panel.Controls["roughZThick"].Text;
            if (panel.Controls.Find("finishZThick", true).Length > 0)
                param[26] = panel.Controls["finishZThick"].Text;
            if (panel.Controls.Find("pointsX1", true).Length > 0)
                param[27] = panel.Controls["pointsX1"].Text;
            if (panel.Controls.Find("pointsY1", true).Length > 0)
                param[28] = panel.Controls["pointsY1"].Text;
            if (panel.Controls.Find("pointsX2", true).Length > 0)
                param[29] = panel.Controls["pointsX2"].Text;
            if (panel.Controls.Find("pointsY2", true).Length > 0)
                param[30] = panel.Controls["pointsY2"].Text;
            if (panel.Controls.Find("centerX", true).Length > 0)
                param[31] = panel.Controls["centerX"].Text;
            if (panel.Controls.Find("centerY", true).Length > 0)
                param[32] = panel.Controls["centerY"].Text;
            if (panel.Controls.Find("radius", true).Length > 0)
                param[33] = panel.Controls["radius"].Text;
            if (panel.Controls.Find("direction", true).Length > 0)
                param[34] = panel.Controls["direction"].Text;
            if (panel.Controls.Find("toolDia", true).Length > 0)
                param[35] = panel.Controls["toolDia"].Text;

            return param;
        }
    }

    //public class Drill
    //{
    //    Panel panel = new Panel();

    //    public Drill(Panel parent)
    //    {
    //        parent.Controls.Add(panel);
    //        panel.Dock = DockStyle.Fill;
    //        element_ini();
    //    }

    //    private void element_ini()
    //    {
    //        int[] column = { 10, 110 };
    //        int[] row = { 10, 40, 70 };
    //        int[] row = new int[row.Length];

    //        for (int i = 0; i < row.Length; i++)
    //        {
    //            row[i] = row[i] + 4;
    //        } 
    //        //row 0
    //        Label type_t = new Label();
    //        type_t.Location = new Point(column[0], row[0]);
    //        type_t.Size = new Size(100, 10);
    //        type_t.Text = "Drill Type:";
    //        panel.Controls.Add(type_t);

    //        ComboBox type = new ComboBox();
    //        type.Location = new Point(column[1], row[0]);
    //        type.Size = new Size(100, 10);
    //        type.Items.Add("Fast Drill");
    //        type.Items.Add("Peck Drill");
    //        type.SelectedItem = "Fast Drill";
    //        panel.Controls.Add(type);
    //    }
    //}
}
